{"version":3,"sources":["../src/feedbackgenerate.js"],"names":["initialized","init","instruction","imagefilepath","document","addEventListener","handleClick","e","target","id","getScoreFeedback","then","feedback","replace","options","title","body","large","ModalFactory","create","modalInstance","show","catch","error","console","Promise","resolve","reject","Ajax","call","methodname","args","done","response","fail","jqXHR","textStatus","errorThrown"],"mappings":"+LA0BA,OACA,O,sDAGIA,CAAAA,CAAW,G,CAEFC,CAAI,CAAG,WAAkC,IAAhCC,CAAAA,CAAgC,GAAhCA,WAAgC,CAAnBC,CAAmB,GAAnBA,aAAmB,CAClD,GAAI,CAACH,CAAL,CAAkB,CA4BdI,QAAQ,CAACC,gBAAT,CAA0B,OAA1B,CA3BoB,QAAdC,CAAAA,WAAc,CAACC,CAAD,CAAO,CAEvB,GAAoB,4CAAhB,GAAAA,CAAC,CAACC,MAAF,CAASC,EAAb,CAAkE,CAG9DC,CAAgB,CAACR,CAAD,CAAcC,CAAd,CAAhB,CAA6CQ,IAA7C,CAAkD,SAAAC,CAAQ,CAAI,CAC1DA,CAAQ,CAAGA,CAAQ,CAACC,OAAT,CAAiB,MAAjB,CAAyB,MAAzB,CAAX,CAGA,GAAMC,CAAAA,CAAO,CAAG,CACZC,KAAK,CAAE,iCADK,CAEZC,IAAI,cAAQJ,CAAR,QAFQ,CAGZK,KAAK,GAHO,CAAhB,CAMAC,UAAaC,MAAb,CAAoBL,CAApB,EAA6BH,IAA7B,CAAkC,SAAAS,CAAa,CAAI,CAC/CA,CAAa,CAACC,IAAd,EACH,CAFD,EAEGC,KAFH,CAES,SAAAC,CAAK,CAAI,CACdC,OAAO,CAACD,KAAR,CAAc,yBAAd,CAAyCA,CAAzC,CACH,CAJD,CAKH,CAfD,EAeGD,KAfH,CAeS,SAAAC,CAAK,CAAI,CACdC,OAAO,CAACD,KAAR,CAAc,+BAAd,CAA+CA,CAA/C,CACH,CAjBD,CAkBH,CACJ,CAGD,EACAvB,CAAW,GACd,CACJ,C,UAGD,GAAMU,CAAAA,CAAgB,CAAG,SAACR,CAAD,CAAcC,CAAd,CAAgC,CACrD,MAAO,IAAIsB,CAAAA,OAAJ,CAAY,SAACC,CAAD,CAAUC,CAAV,CAAqB,CAQpCC,UAAKC,IAAL,CAAU,CAAC,CACPC,UAAU,CAAE,8CADL,CAEPC,IAAI,CARK,CACT7B,WAAW,CAAEA,CADJ,CAETC,aAAa,CAAEA,CAFN,CAMF,CAGP6B,IAAI,CAAE,cAASC,CAAT,CAAmB,CAErBP,CAAO,CAACO,CAAQ,CAACrB,QAAV,CACV,CANM,CAOPsB,IAAI,CAAE,cAASC,CAAT,CAAgBC,CAAhB,CAA4BC,CAA5B,CAAyC,CAE3C,GAAMd,CAAAA,CAAK,CAAG,CACVY,KAAK,CAAEA,CADG,CAEVC,UAAU,CAAEA,CAFF,CAGVC,WAAW,CAAEA,CAHH,CAAd,CAKAV,CAAM,CAACJ,CAAD,CAAN,CACAC,OAAO,CAACD,KAAR,CAAc,mBAAd,CAAmCA,CAAnC,CACH,CAhBM,CAAD,CAAV,CAkBH,CA1BM,CA2BV,C","sourcesContent":["/* eslint-disable promise/always-return */\n/* eslint-disable promise/catch-or-return */\n/* eslint-disable require-jsdoc */\n/* eslint-disable no-console */\n/* eslint-disable no-trailing-spaces */\n// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * @module     assignfeedback_essayscorer/feedbackgenerate\n * @copyright  2024 YOUR NAME <your@email.com>\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n// Define a JavaScript module\nimport ModalFactory from 'core/modal_factory';\nimport Ajax from 'core/ajax';\n// Import {get_string as getString} from 'core/str';\n\nlet initialized = false;\n\nexport const init = ({instruction, imagefilepath}) => {\n    if (!initialized) {\n        const handleClick = (e) => {\n            // Check if the clicked element is the button\n            if (e.target.id === 'id_assignfeedbackessayscorer_generatescore') {\n                // window.console.log('Generate score button clicked\\n' + imagefilepath);\n                // Call the external function to get the score feedback\n                getScoreFeedback(instruction, imagefilepath).then(feedback => {\n                    feedback = feedback.replace(/\\\\n/g, '<br>');\n\n                    // Create options for the modal\n                    const options = {\n                        title: 'AI Generated Score and Feedback',\n                        body: `<p>${feedback}</p>`,\n                        large: true,\n                    };\n                    // Create and display the modal with the feedback\n                    ModalFactory.create(options).then(modalInstance => {\n                        modalInstance.show();\n                    }).catch(error => {\n                        console.error('Error displaying modal:', error);\n                    });\n                }).catch(error => {\n                    console.error('Error getting score feedback:', error);\n                });\n            }\n        };\n\n        // Add event listener only once\n        document.addEventListener('click', handleClick);\n        initialized = true;\n    }\n};\n\n// Function to call the get_scorefeedback external function using AJAX\nconst getScoreFeedback = (instruction, imagefilepath) => {\n    return new Promise((resolve, reject) => {\n        // Prepare data for the AJAX request\n        const data = {\n            instruction: instruction,\n            imagefilepath: imagefilepath,\n        };\n\n        // Make an AJAX request to call the external function\n        Ajax.call([{\n            methodname: 'assignfeedback_essayscorer_get_scorefeedback',\n            args: data,\n            done: function(response) {\n                // Resolve with the feedback received from the external function\n                resolve(response.feedback);\n            },\n            fail: function(jqXHR, textStatus, errorThrown) {\n                // Reject with the error if there is any\n                const error = {\n                    jqXHR: jqXHR,\n                    textStatus: textStatus,\n                    errorThrown: errorThrown\n                };\n                reject(error);\n                console.error('AJAX call failed:', error);\n            }\n        }]);\n    });\n};\n// Function to handle the click event sample only for testing\n// export const init = ({instruction, imagefilepath}) => {\n//     if (!initialized) {\n//         const handleClick = (e) => {\n//             // Create options for the modal\n//             const options = {\n//                 title: 'AI Generated Score and Feedback',\n//                 body: `\n//                         <p>Instruction: ${instruction}</p>\n//                         <p>Image File Path: ${imagefilepath}</p>\n//                     `,\n//                 large: true,\n//             };\n\n//             // Check if the clicked element is the button\n//             if (e.target.id === 'id_assignfeedbackessayscorer_generatescore') {\n//                 // Create and display the modal\n//                 ModalFactory.create(options).then(modalInstance => {\n//                     modalInstance.show();\n//                 });\n\n//                 window.console.log('Generate score button clicked');\n//             }\n//         };\n\n//         // Add event listener only once\n//         document.addEventListener('click', handleClick);\n//         initialized = true;\n//     }\n\n// };"],"file":"feedbackgenerate.min.js"}